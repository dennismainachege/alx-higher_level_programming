===========================
How to Use 0-add_integer.py
===========================

This module provides a function called `add_integer(a, b=98)` which performs the addition of two integers.

Usage
=====

The `add_integer(...)` function returns the sum of the two arguments. It is equivalent to using the `+` operator for numbers.

Examples:
---------
    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

    >>> add_integer(2, -3)
    -1

The function also supports floating-point values.

    >>> add_integer(2.0, 3.0)
    5

Note that floating-point numbers are cast to integers before the addition.

    >>> add_integer(2.9, 0.2)
    2

    >>> add_integer(-2.9, -0.2)
    -2

You can also combine floating-point and non-floating-point values.

    >>> add_integer(2.3, -3)
    -1

The second argument `b` is optional and defaults to 98 if not provided.

    >>> add_integer(2)
    100

Handling Non-Numbers
====================

The `add_integer()` function expects both arguments to be integers or floats. If either argument is a non-integer and non-float, a `TypeError` is raised.

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a `TypeError` message is only printed for the first argument.

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

Handling Special Cases
======================

The function handles special cases where infinity or NaN (Not a Number) is provided.

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
